/*
 * CLARIN Component Registry
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.clarin.cmdi.componentregistry.openapi.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Cloud
 */
@JsonPropertyOrder({
  Cloud.JSON_PROPERTY_DOMAIN,
  Cloud.JSON_PROPERTY_PORT,
  Cloud.JSON_PROPERTY_PATH,
  Cloud.JSON_PROPERTY_REGISTER_PROCEDURE,
  Cloud.JSON_PROPERTY_PROTOCOL
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-17T13:10:36.372458+03:00[Europe/Riga]", comments = "Generator version: 7.8.0")
public class Cloud {
  public static final String JSON_PROPERTY_DOMAIN = "domain";
  private String domain;

  public static final String JSON_PROPERTY_PORT = "port";
  private Integer port;

  public static final String JSON_PROPERTY_PATH = "path";
  private String path;

  public static final String JSON_PROPERTY_REGISTER_PROCEDURE = "registerProcedure";
  private String registerProcedure;

  /**
   * Gets or Sets protocol
   */
  public enum ProtocolEnum {
    XML_RPC("XML_RPC"),
    
    HTTP_POST("HTTP_POST"),
    
    SOAP("SOAP");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ProtocolEnum fromValue(String value) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PROTOCOL = "protocol";
  private ProtocolEnum protocol;

  public Cloud() {
  }

  public Cloud domain(String domain) {
    
    this.domain = domain;
    return this;
  }

  /**
   * Get domain
   * @return domain
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDomain() {
    return domain;
  }


  @JsonProperty(JSON_PROPERTY_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDomain(String domain) {
    this.domain = domain;
  }

  public Cloud port(Integer port) {
    
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPort() {
    return port;
  }


  @JsonProperty(JSON_PROPERTY_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPort(Integer port) {
    this.port = port;
  }

  public Cloud path(String path) {
    
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPath() {
    return path;
  }


  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPath(String path) {
    this.path = path;
  }

  public Cloud registerProcedure(String registerProcedure) {
    
    this.registerProcedure = registerProcedure;
    return this;
  }

  /**
   * Get registerProcedure
   * @return registerProcedure
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REGISTER_PROCEDURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRegisterProcedure() {
    return registerProcedure;
  }


  @JsonProperty(JSON_PROPERTY_REGISTER_PROCEDURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRegisterProcedure(String registerProcedure) {
    this.registerProcedure = registerProcedure;
  }

  public Cloud protocol(ProtocolEnum protocol) {
    
    this.protocol = protocol;
    return this;
  }

  /**
   * Get protocol
   * @return protocol
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ProtocolEnum getProtocol() {
    return protocol;
  }


  @JsonProperty(JSON_PROPERTY_PROTOCOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cloud cloud = (Cloud) o;
    return Objects.equals(this.domain, cloud.domain) &&
        Objects.equals(this.port, cloud.port) &&
        Objects.equals(this.path, cloud.path) &&
        Objects.equals(this.registerProcedure, cloud.registerProcedure) &&
        Objects.equals(this.protocol, cloud.protocol);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domain, port, path, registerProcedure, protocol);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Cloud {\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    registerProcedure: ").append(toIndentedString(registerProcedure)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

