/*
 * CLARIN Component Registry
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.clarin.cmdi.componentregistry.openapi.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Comment
 */
@JsonPropertyOrder({
  Comment.JSON_PROPERTY_COMMENT_DATE,
  Comment.JSON_PROPERTY_ID,
  Comment.JSON_PROPERTY_USER_NAME,
  Comment.JSON_PROPERTY_CAN_DELETE,
  Comment.JSON_PROPERTY_USER_ID,
  Comment.JSON_PROPERTY_COMMENT,
  Comment.JSON_PROPERTY_COMPONENT_REF
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-17T13:10:36.372458+03:00[Europe/Riga]", comments = "Generator version: 7.8.0")
public class Comment {
  public static final String JSON_PROPERTY_COMMENT_DATE = "commentDate";
  private OffsetDateTime commentDate;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_USER_NAME = "userName";
  private String userName;

  public static final String JSON_PROPERTY_CAN_DELETE = "canDelete";
  private Boolean canDelete;

  public static final String JSON_PROPERTY_USER_ID = "userId";
  private Long userId;

  public static final String JSON_PROPERTY_COMMENT = "comment";
  private String comment;

  public static final String JSON_PROPERTY_COMPONENT_REF = "componentRef";
  private String componentRef;

  public Comment() {
  }

  public Comment commentDate(OffsetDateTime commentDate) {
    
    this.commentDate = commentDate;
    return this;
  }

  /**
   * Get commentDate
   * @return commentDate
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMENT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCommentDate() {
    return commentDate;
  }


  @JsonProperty(JSON_PROPERTY_COMMENT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommentDate(OffsetDateTime commentDate) {
    this.commentDate = commentDate;
  }

  public Comment id(String id) {
    
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }

  public Comment userName(String userName) {
    
    this.userName = userName;
    return this;
  }

  /**
   * Get userName
   * @return userName
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserName() {
    return userName;
  }


  @JsonProperty(JSON_PROPERTY_USER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserName(String userName) {
    this.userName = userName;
  }

  public Comment canDelete(Boolean canDelete) {
    
    this.canDelete = canDelete;
    return this;
  }

  /**
   * Get canDelete
   * @return canDelete
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAN_DELETE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCanDelete() {
    return canDelete;
  }


  @JsonProperty(JSON_PROPERTY_CAN_DELETE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCanDelete(Boolean canDelete) {
    this.canDelete = canDelete;
  }

  public Comment userId(Long userId) {
    
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getUserId() {
    return userId;
  }


  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserId(Long userId) {
    this.userId = userId;
  }

  public Comment comment(String comment) {
    
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getComment() {
    return comment;
  }


  @JsonProperty(JSON_PROPERTY_COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setComment(String comment) {
    this.comment = comment;
  }

  public Comment componentRef(String componentRef) {
    
    this.componentRef = componentRef;
    return this;
  }

  /**
   * Get componentRef
   * @return componentRef
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMPONENT_REF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getComponentRef() {
    return componentRef;
  }


  @JsonProperty(JSON_PROPERTY_COMPONENT_REF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setComponentRef(String componentRef) {
    this.componentRef = componentRef;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Comment comment = (Comment) o;
    return Objects.equals(this.commentDate, comment.commentDate) &&
        Objects.equals(this.id, comment.id) &&
        Objects.equals(this.userName, comment.userName) &&
        Objects.equals(this.canDelete, comment.canDelete) &&
        Objects.equals(this.userId, comment.userId) &&
        Objects.equals(this.comment, comment.comment) &&
        Objects.equals(this.componentRef, comment.componentRef);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commentDate, id, userName, canDelete, userId, comment, componentRef);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Comment {\n");
    sb.append("    commentDate: ").append(toIndentedString(commentDate)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    canDelete: ").append(toIndentedString(canDelete)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    componentRef: ").append(toIndentedString(componentRef)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

