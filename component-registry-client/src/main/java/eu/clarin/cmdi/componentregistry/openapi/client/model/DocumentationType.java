/*
 * Component Registry API
 * Components and profiles registry for the Component Metadata Infrastructure
 *
 * The version of the OpenAPI document: 1.0
 * Contact: cmdi@clarin.eu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.clarin.cmdi.componentregistry.openapi.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.dataformat.xml.annotation.*;
import jakarta.xml.bind.annotation.*;
import jakarta.xml.bind.annotation.adapters.*;
import io.github.threetenjaxb.core.*;

/**
 * DocumentationType
 */
@JsonPropertyOrder({
  DocumentationType.JSON_PROPERTY_VALUE,
  DocumentationType.JSON_PROPERTY_LANG
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-24T11:08:44.298260+02:00[Europe/Amsterdam]", comments = "Generator version: 7.8.0")
@XmlRootElement(name = "DocumentationType")
@XmlAccessorType(XmlAccessType.FIELD)
@JacksonXmlRootElement(localName = "DocumentationType")
public class DocumentationType {
  public static final String JSON_PROPERTY_VALUE = "value";
  @XmlElement(name = "value")
  private String value;

  public static final String JSON_PROPERTY_LANG = "lang";
  @XmlAttribute(name = "lang", namespace = "http://www.w3.org/XML/1998/namespace")
  private String lang;

  public DocumentationType() {
  }

  public DocumentationType value(String value) {
    
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "value")

  public String getValue() {
    return value;
  }


  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "value")
  public void setValue(String value) {
    this.value = value;
  }

  public DocumentationType lang(String lang) {
    
    this.lang = lang;
    return this;
  }

  /**
   * Get lang
   * @return lang
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LANG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "lang", isAttribute = true, namespace = "http://www.w3.org/XML/1998/namespace")

  public String getLang() {
    return lang;
  }


  @JsonProperty(JSON_PROPERTY_LANG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  @JacksonXmlProperty(localName = "lang", isAttribute = true, namespace = "http://www.w3.org/XML/1998/namespace")
  public void setLang(String lang) {
    this.lang = lang;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentationType documentationType = (DocumentationType) o;
    return Objects.equals(this.value, documentationType.value) &&
        Objects.equals(this.lang, documentationType.lang);
  }

  @Override
  public int hashCode() {
    return Objects.hash(value, lang);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentationType {\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    lang: ").append(toIndentedString(lang)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

