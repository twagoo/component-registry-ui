/*
 * CLARIN Component Registry
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.clarin.cmdi.componentregistry.openapi.client.api;

import eu.clarin.cmdi.componentregistry.openapi.client.model.BaseDescription;
import eu.clarin.cmdi.componentregistry.openapi.client.model.Comment;
import eu.clarin.cmdi.componentregistry.openapi.client.model.ComponentDescription;
import eu.clarin.cmdi.componentregistry.openapi.client.model.ComponentSpec;
import java.io.File;
import eu.clarin.cmdi.componentregistry.openapi.client.model.ProfileDescription;
import eu.clarin.cmdi.componentregistry.openapi.client.model.ProfileDescriptionsObject;
import eu.clarin.cmdi.componentregistry.openapi.client.model.Rss;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * API tests for RegistryApi
 */
@Ignore
public class RegistryApiTest {

    private final RegistryApi api = new RegistryApi();

    
    /**
     * Deletes a comment from a component
     *
     * 
     */
    @Test
    public void deleteCommentFromComponentTest()  {
        String cmdVersion = null;
        String componentId = null;
        String commentId = null;
        api.deleteCommentFromComponent(cmdVersion, componentId, commentId);

        // TODO: test validations
    }
    
    /**
     * Deletes a comment from a component
     *
     * 
     */
    @Test
    public void deleteCommentFromComponent1Test()  {
        String cmdVersion = null;
        String componentId = null;
        String commentId = null;
        api.deleteCommentFromComponent1(cmdVersion, componentId, commentId);

        // TODO: test validations
    }
    
    /**
     * Deletes a comment from a profile
     *
     * 
     */
    @Test
    public void deleteCommentFromProfileTest()  {
        String cmdVersion = null;
        String profileId = null;
        String commentId = null;
        api.deleteCommentFromProfile(cmdVersion, profileId, commentId);

        // TODO: test validations
    }
    
    /**
     * Deletes a comment from a profile
     *
     * 
     */
    @Test
    public void deleteCommentFromProfile1Test()  {
        String cmdVersion = null;
        String profileId = null;
        String commentId = null;
        api.deleteCommentFromProfile1(cmdVersion, profileId, commentId);

        // TODO: test validations
    }
    
    /**
     * Deletes the component with the specified ID from its registry
     *
     * 
     */
    @Test
    public void deleteRegisteredComponentTest()  {
        String cmdVersion = null;
        String componentId = null;
        api.deleteRegisteredComponent(cmdVersion, componentId);

        // TODO: test validations
    }
    
    /**
     * Deletes the component with the specified ID from its registry
     *
     * 
     */
    @Test
    public void deleteRegisteredComponent1Test()  {
        String cmdVersion = null;
        String componentId = null;
        api.deleteRegisteredComponent1(cmdVersion, componentId);

        // TODO: test validations
    }
    
    /**
     * Deletes the profile with the specified ID from its registry
     *
     * 
     */
    @Test
    public void deleteRegisteredProfileTest()  {
        String cmdVersion = null;
        String profileId = null;
        api.deleteRegisteredProfile(cmdVersion, profileId);

        // TODO: test validations
    }
    
    /**
     * Deletes the profile with the specified ID from its registry
     *
     * 
     */
    @Test
    public void deleteRegisteredProfile1Test()  {
        String cmdVersion = null;
        String profileId = null;
        api.deleteRegisteredProfile1(cmdVersion, profileId);

        // TODO: test validations
    }
    
    /**
     * Returns a listing of all comments that have been made on the identified component
     *
     * 
     */
    @Test
    public void getCommentsFromComponentTest()  {
        String cmdVersion = null;
        String componentId = null;
        List<Comment> response = api.getCommentsFromComponent(cmdVersion, componentId);

        // TODO: test validations
    }
    
    /**
     * Returns a listing of all comments that have been made on the identified component
     *
     * 
     */
    @Test
    public void getCommentsFromComponent1Test()  {
        String cmdVersion = null;
        String componentId = null;
        List<Comment> response = api.getCommentsFromComponent1(cmdVersion, componentId);

        // TODO: test validations
    }
    
    /**
     * Returns a listing of all comments that have been made on the identified profile
     *
     * 
     */
    @Test
    public void getCommentsFromProfileTest()  {
        String cmdVersion = null;
        String profileId = null;
        List<Comment> response = api.getCommentsFromProfile(cmdVersion, profileId);

        // TODO: test validations
    }
    
    /**
     * Returns a listing of all comments that have been made on the identified profile
     *
     * 
     */
    @Test
    public void getCommentsFromProfile1Test()  {
        String cmdVersion = null;
        String profileId = null;
        List<Comment> response = api.getCommentsFromProfile1(cmdVersion, profileId);

        // TODO: test validations
    }
    
    /**
     * Gets the status of a registered component
     *
     * 
     */
    @Test
    public void getComponentStatusTest()  {
        String cmdVersion = null;
        String componentId = null;
        api.getComponentStatus(cmdVersion, componentId);

        // TODO: test validations
    }
    
    /**
     * Gets the status of a registered component
     *
     * 
     */
    @Test
    public void getComponentStatus1Test()  {
        String cmdVersion = null;
        String componentId = null;
        api.getComponentStatus1(cmdVersion, componentId);

        // TODO: test validations
    }
    
    /**
     * Gets the successor of a registered component
     *
     * 
     */
    @Test
    public void getComponentSuccessorTest()  {
        String cmdVersion = null;
        String componentId = null;
        api.getComponentSuccessor(cmdVersion, componentId);

        // TODO: test validations
    }
    
    /**
     * Gets the successor of a registered component
     *
     * 
     */
    @Test
    public void getComponentSuccessor1Test()  {
        String cmdVersion = null;
        String componentId = null;
        api.getComponentSuccessor1(cmdVersion, componentId);

        // TODO: test validations
    }
    
    /**
     * Returns a descriptions listing of components that use the identified component
     *
     * 
     */
    @Test
    public void getComponentUsageTest()  {
        String cmdVersion = null;
        String componentId = null;
        List<BaseDescription> response = api.getComponentUsage(cmdVersion, componentId);

        // TODO: test validations
    }
    
    /**
     * Returns a descriptions listing of components that use the identified component
     *
     * 
     */
    @Test
    public void getComponentUsage1Test()  {
        String cmdVersion = null;
        String componentId = null;
        List<BaseDescription> response = api.getComponentUsage1(cmdVersion, componentId);

        // TODO: test validations
    }
    
    /**
     * Gets the status of a registered profile
     *
     * 
     */
    @Test
    public void getProfileStatusTest()  {
        String cmdVersion = null;
        String profileId = null;
        api.getProfileStatus(cmdVersion, profileId);

        // TODO: test validations
    }
    
    /**
     * Gets the status of a registered profile
     *
     * 
     */
    @Test
    public void getProfileStatus1Test()  {
        String cmdVersion = null;
        String profileId = null;
        api.getProfileStatus1(cmdVersion, profileId);

        // TODO: test validations
    }
    
    /**
     * Gets the successor of a registered component
     *
     * 
     */
    @Test
    public void getProfileSuccessorTest()  {
        String cmdVersion = null;
        String profileId = null;
        api.getProfileSuccessor(cmdVersion, profileId);

        // TODO: test validations
    }
    
    /**
     * Gets the successor of a registered component
     *
     * 
     */
    @Test
    public void getProfileSuccessor1Test()  {
        String cmdVersion = null;
        String profileId = null;
        api.getProfileSuccessor1(cmdVersion, profileId);

        // TODO: test validations
    }
    
    /**
     * The component specification of a single component
     *
     * 
     */
    @Test
    public void getRegisteredComponentTest()  {
        String cmdVersion = null;
        String componentId = null;
        ComponentSpec response = api.getRegisteredComponent(cmdVersion, componentId);

        // TODO: test validations
    }
    
    /**
     * The component specification of a single component
     *
     * 
     */
    @Test
    public void getRegisteredComponent1Test()  {
        String cmdVersion = null;
        String componentId = null;
        ComponentSpec response = api.getRegisteredComponent1(cmdVersion, componentId);

        // TODO: test validations
    }
    
    /**
     * The expanded XML or XSD represenation of the component specification of a single component (publicly accessible regardless of state!)
     *
     * 
     */
    @Test
    public void getRegisteredComponentRawTypeTest()  {
        String cmdVersion = null;
        String componentId = null;
        String rawType = null;
        ComponentSpec response = api.getRegisteredComponentRawType(cmdVersion, componentId, rawType);

        // TODO: test validations
    }
    
    /**
     * The expanded XML or XSD represenation of the component specification of a single component (publicly accessible regardless of state!)
     *
     * 
     */
    @Test
    public void getRegisteredComponentRawType1Test()  {
        String cmdVersion = null;
        String componentId = null;
        String rawType = null;
        ComponentSpec response = api.getRegisteredComponentRawType1(cmdVersion, componentId, rawType);

        // TODO: test validations
    }
    
    /**
     * A listing of the descriptions of components in the specified registry space
     *
     * 
     */
    @Test
    public void getRegisteredComponentsTest()  {
        String cmdVersion = null;
        String registrySpace = null;
        String groupId = null;
        List<String> status = null;
        String userspace = null;
        List<ComponentDescription> response = api.getRegisteredComponents(cmdVersion, registrySpace, groupId, status, userspace);

        // TODO: test validations
    }
    
    /**
     * A listing of the descriptions of components in the specified registry space
     *
     * 
     */
    @Test
    public void getRegisteredComponents1Test()  {
        String cmdVersion = null;
        String registrySpace = null;
        String groupId = null;
        List<String> status = null;
        String userspace = null;
        List<ComponentDescription> response = api.getRegisteredComponents1(cmdVersion, registrySpace, groupId, status, userspace);

        // TODO: test validations
    }
    
    /**
     * The component specification of a single profile
     *
     * 
     */
    @Test
    public void getRegisteredProfileTest()  {
        String cmdVersion = null;
        String profileId = null;
        ComponentSpec response = api.getRegisteredProfile(cmdVersion, profileId);

        // TODO: test validations
    }
    
    /**
     * The component specification of a single profile
     *
     * 
     */
    @Test
    public void getRegisteredProfile1Test()  {
        String cmdVersion = null;
        String profileId = null;
        ComponentSpec response = api.getRegisteredProfile1(cmdVersion, profileId);

        // TODO: test validations
    }
    
    /**
     * The expanded XML or XSD represenation of the component specification of a single profile (publicly accessible regardless of state!)
     *
     * 
     */
    @Test
    public void getRegisteredProfileRawTypeTest()  {
        String cmdVersion = null;
        String profileId = null;
        String targetVersion = null;
        String rawType = null;
        api.getRegisteredProfileRawType(cmdVersion, profileId, targetVersion, rawType);

        // TODO: test validations
    }
    
    /**
     * The expanded XML or XSD represenation of the component specification of a single profile (publicly accessible regardless of state!)
     *
     * 
     */
    @Test
    public void getRegisteredProfileRawType1Test()  {
        String cmdVersion = null;
        String profileId = null;
        String targetVersion = null;
        String rawType = null;
        api.getRegisteredProfileRawType1(cmdVersion, profileId, targetVersion, rawType);

        // TODO: test validations
    }
    
    /**
     * A listing of the descriptions of profiles in the specified registry space
     *
     * 
     */
    @Test
    public void getRegisteredProfilesTest()  {
        String cmdVersion = null;
        String registrySpace = null;
        Boolean mdEditor = null;
        String groupId = null;
        List<String> status = null;
        String userspace = null;
        List<ProfileDescription> response = api.getRegisteredProfiles(cmdVersion, registrySpace, mdEditor, groupId, status, userspace);

        // TODO: test validations
    }
    
    /**
     * A listing of the descriptions of profiles in the specified registry space
     *
     * 
     */
    @Test
    public void getRegisteredProfiles1Test()  {
        String cmdVersion = null;
        String registrySpace = null;
        Boolean mdEditor = null;
        String groupId = null;
        List<String> status = null;
        String userspace = null;
        List<ProfileDescription> response = api.getRegisteredProfiles1(cmdVersion, registrySpace, mdEditor, groupId, status, userspace);

        // TODO: test validations
    }
    
    /**
     * A listing of the descriptions of profiles in the specified registry space
     *
     * 
     */
    @Test
    public void getRegisteredProfilesObjectTest()  {
        String cmdVersion = null;
        String registrySpace = null;
        Boolean mdEditor = null;
        String groupId = null;
        List<String> status = null;
        String userspace = null;
        ProfileDescriptionsObject response = api.getRegisteredProfilesObject(cmdVersion, registrySpace, mdEditor, groupId, status, userspace);

        // TODO: test validations
    }
    
    /**
     * A listing of the descriptions of profiles in the specified registry space
     *
     * 
     */
    @Test
    public void getRegisteredProfilesObject1Test()  {
        String cmdVersion = null;
        String registrySpace = null;
        Boolean mdEditor = null;
        String groupId = null;
        List<String> status = null;
        String userspace = null;
        ProfileDescriptionsObject response = api.getRegisteredProfilesObject1(cmdVersion, registrySpace, mdEditor, groupId, status, userspace);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     */
    @Test
    public void getRssComponentTest()  {
        String cmdVersion = null;
        String groupId = null;
        String registrySpace = null;
        List<String> status = null;
        String limit = null;
        Rss response = api.getRssComponent(cmdVersion, groupId, registrySpace, status, limit);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     */
    @Test
    public void getRssComponent1Test()  {
        String cmdVersion = null;
        String groupId = null;
        String registrySpace = null;
        List<String> status = null;
        String limit = null;
        Rss response = api.getRssComponent1(cmdVersion, groupId, registrySpace, status, limit);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     */
    @Test
    public void getRssOfCommentsFromComponentTest()  {
        String cmdVersion = null;
        String componentId = null;
        String limit = null;
        Rss response = api.getRssOfCommentsFromComponent(cmdVersion, componentId, limit);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     */
    @Test
    public void getRssOfCommentsFromComponent1Test()  {
        String cmdVersion = null;
        String componentId = null;
        String limit = null;
        Rss response = api.getRssOfCommentsFromComponent1(cmdVersion, componentId, limit);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     */
    @Test
    public void getRssOfCommentsFromProfileTest()  {
        String cmdVersion = null;
        String profileId = null;
        String limit = null;
        Rss response = api.getRssOfCommentsFromProfile(cmdVersion, profileId, limit);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     */
    @Test
    public void getRssOfCommentsFromProfile1Test()  {
        String cmdVersion = null;
        String profileId = null;
        String limit = null;
        Rss response = api.getRssOfCommentsFromProfile1(cmdVersion, profileId, limit);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     */
    @Test
    public void getRssProfileTest()  {
        String cmdVersion = null;
        String groupId = null;
        String registrySpace = null;
        List<String> status = null;
        String limit = null;
        Rss response = api.getRssProfile(cmdVersion, groupId, registrySpace, status, limit);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     */
    @Test
    public void getRssProfile1Test()  {
        String cmdVersion = null;
        String groupId = null;
        String registrySpace = null;
        List<String> status = null;
        String limit = null;
        Rss response = api.getRssProfile1(cmdVersion, groupId, registrySpace, status, limit);

        // TODO: test validations
    }
    
    /**
     * Returns a single comment on a component
     *
     * 
     */
    @Test
    public void getSpecifiedCommentFromComponentTest()  {
        String cmdVersion = null;
        String componentId = null;
        String commentId = null;
        Comment response = api.getSpecifiedCommentFromComponent(cmdVersion, componentId, commentId);

        // TODO: test validations
    }
    
    /**
     * Returns a single comment on a component
     *
     * 
     */
    @Test
    public void getSpecifiedCommentFromComponent1Test()  {
        String cmdVersion = null;
        String componentId = null;
        String commentId = null;
        Comment response = api.getSpecifiedCommentFromComponent1(cmdVersion, componentId, commentId);

        // TODO: test validations
    }
    
    /**
     * Returns a single comment on a profile
     *
     * 
     */
    @Test
    public void getSpecifiedCommentFromProfileTest()  {
        String cmdVersion = null;
        String profileId = null;
        String commentId = null;
        Comment response = api.getSpecifiedCommentFromProfile(cmdVersion, profileId, commentId);

        // TODO: test validations
    }
    
    /**
     * Returns a single comment on a profile
     *
     * 
     */
    @Test
    public void getSpecifiedCommentFromProfile1Test()  {
        String cmdVersion = null;
        String profileId = null;
        String commentId = null;
        Comment response = api.getSpecifiedCommentFromProfile1(cmdVersion, profileId, commentId);

        // TODO: test validations
    }
    
    /**
     * Allows for deletion of single component comment (workaround for Flex which does not support the DELETE method)
     *
     * 
     */
    @Test
    public void manipulateCommentFromComponentTest()  {
        String cmdVersion = null;
        String componentId = null;
        String commentId = null;
        String method = null;
        api.manipulateCommentFromComponent(cmdVersion, componentId, commentId, method);

        // TODO: test validations
    }
    
    /**
     * Allows for deletion of single component comment (workaround for Flex which does not support the DELETE method)
     *
     * 
     */
    @Test
    public void manipulateCommentFromComponent1Test()  {
        String cmdVersion = null;
        String componentId = null;
        String commentId = null;
        String method = null;
        api.manipulateCommentFromComponent1(cmdVersion, componentId, commentId, method);

        // TODO: test validations
    }
    
    /**
     * Allows for deletion of single profile comment (workaround for Flex which does not support the DELETE method)
     *
     * 
     */
    @Test
    public void manipulateCommentFromProfileTest()  {
        String cmdVersion = null;
        String profileId = null;
        String commentId = null;
        String method = null;
        api.manipulateCommentFromProfile(cmdVersion, profileId, commentId, method);

        // TODO: test validations
    }
    
    /**
     * Allows for deletion of single profile comment (workaround for Flex which does not support the DELETE method)
     *
     * 
     */
    @Test
    public void manipulateCommentFromProfile1Test()  {
        String cmdVersion = null;
        String profileId = null;
        String commentId = null;
        String method = null;
        api.manipulateCommentFromProfile1(cmdVersion, profileId, commentId, method);

        // TODO: test validations
    }
    
    /**
     * Allows for deletion of single component (workaround for Flex which does not support the DELETE method)
     *
     * 
     */
    @Test
    public void manipulateRegisteredComponentTest()  {
        String cmdVersion = null;
        String componentId = null;
        String method = null;
        api.manipulateRegisteredComponent(cmdVersion, componentId, method);

        // TODO: test validations
    }
    
    /**
     * Allows for deletion of single component (workaround for Flex which does not support the DELETE method)
     *
     * 
     */
    @Test
    public void manipulateRegisteredComponent1Test()  {
        String cmdVersion = null;
        String componentId = null;
        String method = null;
        api.manipulateRegisteredComponent1(cmdVersion, componentId, method);

        // TODO: test validations
    }
    
    /**
     * Allows for deletion of single profile (workaround for Flex which does not support the DELETE method)
     *
     * 
     */
    @Test
    public void manipulateRegisteredProfileTest()  {
        String cmdVersion = null;
        String profileId = null;
        String method = null;
        api.manipulateRegisteredProfile(cmdVersion, profileId, method);

        // TODO: test validations
    }
    
    /**
     * Allows for deletion of single profile (workaround for Flex which does not support the DELETE method)
     *
     * 
     */
    @Test
    public void manipulateRegisteredProfile1Test()  {
        String cmdVersion = null;
        String profileId = null;
        String method = null;
        api.manipulateRegisteredProfile1(cmdVersion, profileId, method);

        // TODO: test validations
    }
    
    /**
     * Keeps the session alive
     *
     * 
     */
    @Test
    public void pingSessionTest()  {
        String cmdVersion = null;
        api.pingSession(cmdVersion);

        // TODO: test validations
    }
    
    /**
     * Keeps the session alive
     *
     * 
     */
    @Test
    public void pingSession1Test()  {
        String cmdVersion = null;
        api.pingSession1(cmdVersion);

        // TODO: test validations
    }
    
    /**
     * Changes the state of the specified component to published
     *
     * 
     */
    @Test
    public void publishRegisteredComponentTest()  {
        String cmdVersion = null;
        String componentId = null;
        File data = null;
        String name = null;
        String description = null;
        String group = null;
        String domainName = null;
        api.publishRegisteredComponent(cmdVersion, componentId, data, name, description, group, domainName);

        // TODO: test validations
    }
    
    /**
     * Changes the state of the specified component to published
     *
     * 
     */
    @Test
    public void publishRegisteredComponent1Test()  {
        String cmdVersion = null;
        String componentId = null;
        File data = null;
        String name = null;
        String description = null;
        String group = null;
        String domainName = null;
        api.publishRegisteredComponent1(cmdVersion, componentId, data, name, description, group, domainName);

        // TODO: test validations
    }
    
    /**
     * Changes the state of the specified profile to published
     *
     * 
     */
    @Test
    public void publishRegisteredProfileTest()  {
        String cmdVersion = null;
        String profileId = null;
        File data = null;
        String name = null;
        String description = null;
        String group = null;
        String domainName = null;
        api.publishRegisteredProfile(cmdVersion, profileId, data, name, description, group, domainName);

        // TODO: test validations
    }
    
    /**
     * Changes the state of the specified profile to published
     *
     * 
     */
    @Test
    public void publishRegisteredProfile1Test()  {
        String cmdVersion = null;
        String profileId = null;
        File data = null;
        String name = null;
        String description = null;
        String group = null;
        String domainName = null;
        api.publishRegisteredProfile1(cmdVersion, profileId, data, name, description, group, domainName);

        // TODO: test validations
    }
    
    /**
     * Publishes a comment on the specified component
     *
     * 
     */
    @Test
    public void registerCommentInComponentTest()  {
        String cmdVersion = null;
        String componentId = null;
        File data = null;
        api.registerCommentInComponent(cmdVersion, componentId, data);

        // TODO: test validations
    }
    
    /**
     * Publishes a comment on the specified component
     *
     * 
     */
    @Test
    public void registerCommentInComponent1Test()  {
        String cmdVersion = null;
        String componentId = null;
        File data = null;
        api.registerCommentInComponent1(cmdVersion, componentId, data);

        // TODO: test validations
    }
    
    /**
     * Publishes a comment on the specified profile
     *
     * 
     */
    @Test
    public void registerCommentInProfileTest()  {
        String cmdVersion = null;
        String profileId = null;
        File data = null;
        api.registerCommentInProfile(cmdVersion, profileId, data);

        // TODO: test validations
    }
    
    /**
     * Publishes a comment on the specified profile
     *
     * 
     */
    @Test
    public void registerCommentInProfile1Test()  {
        String cmdVersion = null;
        String profileId = null;
        File data = null;
        api.registerCommentInProfile1(cmdVersion, profileId, data);

        // TODO: test validations
    }
    
    /**
     * Registers a component specification (data content) with the associated metadata (form content) in the user&#39;s private space
     *
     * 
     */
    @Test
    public void registerComponentTest()  {
        String cmdVersion = null;
        File data = null;
        String name = null;
        String description = null;
        String group = null;
        String domainName = null;
        api.registerComponent(cmdVersion, data, name, description, group, domainName);

        // TODO: test validations
    }
    
    /**
     * Registers a component specification (data content) with the associated metadata (form content) in the user&#39;s private space
     *
     * 
     */
    @Test
    public void registerComponent1Test()  {
        String cmdVersion = null;
        File data = null;
        String name = null;
        String description = null;
        String group = null;
        String domainName = null;
        api.registerComponent1(cmdVersion, data, name, description, group, domainName);

        // TODO: test validations
    }
    
    /**
     * Registers a profile specification (data content) with the associated metadata (form content) in the user&#39;s private space
     *
     * 
     */
    @Test
    public void registerProfileTest()  {
        String cmdVersion = null;
        File data = null;
        String name = null;
        String description = null;
        String group = null;
        String domainName = null;
        api.registerProfile(cmdVersion, data, name, description, group, domainName);

        // TODO: test validations
    }
    
    /**
     * Registers a profile specification (data content) with the associated metadata (form content) in the user&#39;s private space
     *
     * 
     */
    @Test
    public void registerProfile1Test()  {
        String cmdVersion = null;
        File data = null;
        String name = null;
        String description = null;
        String group = null;
        String domainName = null;
        api.registerProfile1(cmdVersion, data, name, description, group, domainName);

        // TODO: test validations
    }
    
    /**
     * Updates the status of an already registered component
     *
     * 
     */
    @Test
    public void updateComponentStatusTest()  {
        String cmdVersion = null;
        String componentId = null;
        String status = null;
        api.updateComponentStatus(cmdVersion, componentId, status);

        // TODO: test validations
    }
    
    /**
     * Updates the status of an already registered component
     *
     * 
     */
    @Test
    public void updateComponentStatus1Test()  {
        String cmdVersion = null;
        String componentId = null;
        String status = null;
        api.updateComponentStatus1(cmdVersion, componentId, status);

        // TODO: test validations
    }
    
    /**
     * Sets the successor for a registered component (must have deprecated status)
     *
     * 
     */
    @Test
    public void updateComponentSuccessorTest()  {
        String cmdVersion = null;
        String componentId = null;
        String successor = null;
        api.updateComponentSuccessor(cmdVersion, componentId, successor);

        // TODO: test validations
    }
    
    /**
     * Sets the successor for a registered component (must have deprecated status)
     *
     * 
     */
    @Test
    public void updateComponentSuccessor1Test()  {
        String cmdVersion = null;
        String componentId = null;
        String successor = null;
        api.updateComponentSuccessor1(cmdVersion, componentId, successor);

        // TODO: test validations
    }
    
    /**
     * Updates the status of an already registered profile
     *
     * 
     */
    @Test
    public void updateProfileStatusTest()  {
        String cmdVersion = null;
        String profileId = null;
        String status = null;
        api.updateProfileStatus(cmdVersion, profileId, status);

        // TODO: test validations
    }
    
    /**
     * Updates the status of an already registered profile
     *
     * 
     */
    @Test
    public void updateProfileStatus1Test()  {
        String cmdVersion = null;
        String profileId = null;
        String status = null;
        api.updateProfileStatus1(cmdVersion, profileId, status);

        // TODO: test validations
    }
    
    /**
     * Sets the successor for a registered profile (must have deprecated status)
     *
     * 
     */
    @Test
    public void updateProfileSuccessorTest()  {
        String cmdVersion = null;
        String profileId = null;
        String successor = null;
        api.updateProfileSuccessor(cmdVersion, profileId, successor);

        // TODO: test validations
    }
    
    /**
     * Sets the successor for a registered profile (must have deprecated status)
     *
     * 
     */
    @Test
    public void updateProfileSuccessor1Test()  {
        String cmdVersion = null;
        String profileId = null;
        String successor = null;
        api.updateProfileSuccessor1(cmdVersion, profileId, successor);

        // TODO: test validations
    }
    
    /**
     * Updates an already registered (but unpublished) component
     *
     * 
     */
    @Test
    public void updateRegisteredComponentTest()  {
        String cmdVersion = null;
        String componentId = null;
        File data = null;
        String name = null;
        String description = null;
        String group = null;
        String domainName = null;
        api.updateRegisteredComponent(cmdVersion, componentId, data, name, description, group, domainName);

        // TODO: test validations
    }
    
    /**
     * Updates an already registered (but unpublished) component
     *
     * 
     */
    @Test
    public void updateRegisteredComponent1Test()  {
        String cmdVersion = null;
        String componentId = null;
        File data = null;
        String name = null;
        String description = null;
        String group = null;
        String domainName = null;
        api.updateRegisteredComponent1(cmdVersion, componentId, data, name, description, group, domainName);

        // TODO: test validations
    }
    
    /**
     * Updates an already registered (but unpublished) profile
     *
     * 
     */
    @Test
    public void updateRegisteredProfileTest()  {
        String cmdVersion = null;
        String profileId = null;
        File data = null;
        String name = null;
        String description = null;
        String group = null;
        String domainName = null;
        api.updateRegisteredProfile(cmdVersion, profileId, data, name, description, group, domainName);

        // TODO: test validations
    }
    
    /**
     * Updates an already registered (but unpublished) profile
     *
     * 
     */
    @Test
    public void updateRegisteredProfile1Test()  {
        String cmdVersion = null;
        String profileId = null;
        File data = null;
        String name = null;
        String description = null;
        String group = null;
        String domainName = null;
        api.updateRegisteredProfile1(cmdVersion, profileId, data, name, description, group, domainName);

        // TODO: test validations
    }
    
}